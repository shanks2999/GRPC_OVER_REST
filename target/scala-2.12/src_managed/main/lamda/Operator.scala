// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package lamda



/** The request message containing the user's name.
  */
@SerialVersionUID(0L)
final case class Operator(
    varA: String = "",
    varB: String = ""
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Operator] with com.trueaccord.lenses.Updatable[Operator] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (varA != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, varA) }
      if (varB != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, varB) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = varA
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = varB
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): lamda.Operator = {
      var __varA = this.varA
      var __varB = this.varB
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __varA = _input__.readString()
          case 18 =>
            __varB = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      lamda.Operator(
          varA = __varA,
          varB = __varB
      )
    }
    def withVarA(__v: String): Operator = copy(varA = __v)
    def withVarB(__v: String): Operator = copy(varB = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = varA
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = varB
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(varA)
        case 2 => _root_.scalapb.descriptors.PString(varB)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = lamda.Operator
}

object Operator extends com.trueaccord.scalapb.GeneratedMessageCompanion[lamda.Operator] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[lamda.Operator] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): lamda.Operator = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    lamda.Operator(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[lamda.Operator] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      lamda.Operator(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = LamdaProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = LamdaProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = lamda.Operator(
  )
  implicit class OperatorLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, lamda.Operator]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, lamda.Operator](_l) {
    def varA: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.varA)((c_, f_) => c_.copy(varA = f_))
    def varB: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.varB)((c_, f_) => c_.copy(varB = f_))
  }
  final val VARA_FIELD_NUMBER = 1
  final val VARB_FIELD_NUMBER = 2
}
